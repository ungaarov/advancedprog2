package main

import (
	"bytes"
	"strings"
	"testing"
)

func TestIsPrime(t *testing.T) {
	// test some prime numbers
	primes := []int{2, 3, 5, 7, 11, 13, 17, 19}
	for _, p := range primes {
		ok, res := isPrime(p)
		if !ok {
			t.Errorf("%d is a prime number, but isPrime returned false", p)
		}
		expected := fmt.Sprintf("%d is a prime number!", p)
		if res != expected {
			t.Errorf("Expected '%s', but got '%s'", expected, res)
		}
	}

	// test some composite numbers
	composites := []int{4, 6, 8, 9, 10, 12, 15, 20}
	for _, c := range composites {
		ok, res := isPrime(c)
		if ok {
			t.Errorf("%d is not a prime number, but isPrime returned true", c)
		}
		expected := fmt.Sprintf("%d is not a prime number because it is divisible by %d!", c, smallestDivisor(c))
		if res != expected {
			t.Errorf("Expected '%s', but got '%s'", expected, res)
		}
	}

	// test some edge cases
	negative := -1
	ok, res := isPrime(negative)
	if ok {
		t.Errorf("%d is not a prime number, but isPrime returned true", negative)
	}
	expected := "Negative numbers are not prime, by definition!"
	if res != expected {
		t.Errorf("Expected '%s', but got '%s'", expected, res)
	}

	zero := 0
	ok, res = isPrime(zero)
	if ok {
		t.Errorf("%d is not a prime number, but isPrime returned true", zero)
	}
	expected = "0 is not prime, by definition!"
	if res != expected {
		t.Errorf("Expected '%s', but got '%s'", expected, res)
	}

	one := 1
	ok, res = isPrime(one)
	if ok {
		t.Errorf("%d is not a prime number, but isPrime returned true", one)
	}
	expected = "1 is not prime, by definition!"
	if res != expected {
		t.Errorf("Expected '%s', but got '%s'", expected, res)
	}
}

func TestCheckNumbers(t *testing.T) {
	// test a prime number
	res, done := checkNumbers(bufio.NewScanner(strings.NewReader("7\n")))
	if done {
		t.Errorf("checkNumbers returned done as true for a prime number")
	}
	if res != "7 is a prime number!" {
		t.Errorf("checkNumbers returned incorrect result for a prime number: got %s, want 7 is a prime number!", res)
	}

	// test a non-prime number
	res, done = checkNumbers(bufio.NewScanner(strings.NewReader("6\n")))
	if done {
		t.Errorf("checkNumbers returned done as true for a non-prime number")
	}
	if res != "6 is not a prime number because it is divisible by 2!" {
		t.Errorf("checkNumbers returned incorrect result for a non-prime number: got %s, want 6 is not a prime number because it is divisible by 2!", res)
	}

	// test a negative number
	res, done = checkNumbers(bufio.NewScanner(strings.NewReader("-7\n")))
	if done {
		t.Errorf("checkNumbers returned done as true for a negative number")
	}
	if res != "Negative numbers are not prime, by definition!" {
		t.Errorf("checkNumbers returned incorrect result for a negative number: got %s, want Negative numbers are not prime, by definition!", res)
	}

	// test a non-number input
	res, done = checkNumbers(bufio.NewScanner(strings.NewReader("not a number\n")))
	if done {
		t.Errorf("checkNumbers returned done as true for non-number input")
	}
	if res != "Please enter a whole number!" {
		t.Errorf("checkNumbers returned incorrect result for non-number input: got %s, want Please enter a whole number!", res)
	}

	// test the quit command
	res, done = checkNumbers(bufio.NewScanner(strings.NewReader("q\n")))
	if !done {
		t.Errorf("checkNumbers did not return done as true for quit command")
	}
	if res != "" {
		t.Errorf("checkNumbers returned a result for quit command: got %s, want empty string", res)
	}
}

